--
-- extract.lua - Generates VB6 consts from preprocessor defines in a C/C++ source file
--
-- Usage:
--        C:> luajit.exe consts.lua [dll_def_file] [vb_module_name]
--
-- Generates C/C++ source file that printf's VB6 constants with calculated values
-- 
-- Expects cl.exe to be in PATH and INCLUDE/LIB to be set correctly
--
local re = require('re')

local CONSTS_PREFIX = "SQLITE_"
local CL_EXE = "cl.exe"
--- command-line arguments defaults
local DEFAULT_ARG1 = "sqlite3.h"
local DEFAULT_ARG2 = "mdSqliteHelper"

local function readfile(name)
  local f = io.open(name, "rb")
  local ret = f:read("*all")
  f:close()
  return ret
end

local function writefile(name, content)
  local f = io.open(name, "wb")
  f:write(content)
  f:close()
end

local const_parser = re.compile([[
    top         <- {| ({| (%s* '#' %s* 'define' %s+ {:cname: ']]..CONSTS_PREFIX..[[' [_%w]+ :}) %s+ {:cval: ('(' [x%d]+ ')') / [x%d]+ / <paren> :} |} / <skipline>)+ |}
    paren       <- '(' (![()] .)* (<paren> (![()] .)*)* ')'
    skipline    <- (!%nl .)* %nl
]], nil)

local function main(h_file, mod_name)
    local prep = {}
    local body = {}
    local consts = {}
    
    prep[#prep + 1] = [[
# pragma warning (disable : 4022)  // pointer mismatch for actual parameter x
# pragma warning (disable : 4047)  // 'void ** ' differs in levels of indirection from 'long *'
# pragma warning (disable : 4049)  // terminating line number emission
# pragma warning (disable : 4090)  // 'function' : different 'volatile' qualifiers
# pragma warning (disable : 4550)  // expression evaluates to a function which is missing an argument list 
# pragma warning (disable : 4761)  // integral size mismatch in argument; conversion supplied
# pragma warning (disable : 4067)
# pragma warning (disable : 4005)

#define SQLITE_ENABLE_FTS4 1
#define SQLITE_ENABLE_FTS4_PARENTHESIS 1
#define SQLITE_ENABLE_RTREE 1
#define SQLITE_STDCALL __stdcall

#include <stdio.h>
#include <windows.h>]]
    prep[#prep + 1] = string.format("#include \"%s\"", h_file)
    prep[#prep + 1] = "#include <stdio.h>"
    
    body[#body + 1] = "void main() {"
    for _, v in ipairs(const_parser:match(readfile(h_file))) do
        if not consts[v.cname] then
            consts[v.cname] = true    
            local format = (v.cval:sub(1, 1) == "(" or v.cval:sub(1, 2) == "0x") and "&H%X" or "%d"
            if v.cval:sub(1, 1) ~= "(" then
                prep[#prep + 1] = string.format([[
#if !defined(%s) || EXPAND(%s) == 1
 #define %s %s
#endif]], v.cname, v.cname, v.cname, v.cval)
            else
                prep[#prep + 1] = string.format([[
#if !defined(%s)
 #define %s %s
#endif]], v.cname, v.cname, v.cval)
            end
            body[#body + 1] = string.format("printf(\"Public Const %%-38s As Long = %s\\n\", %q, %s); // %s", format, v.cname, v.cname, v.cval)
        end
    end
    body[#body + 1] = "}"
    writefile("~$consts.c", table.concat(prep, "\n") .. "\n" .. table.concat(body, "\n"))
    local f = assert(io.popen(CL_EXE .. " /nologo ~$consts.c /MD /Fe~$consts.exe", 'r'))
    local s = assert(f:read("*all"))
    f = assert(io.popen("~$consts.exe", 'r'))
    s = assert(f:read("*all"))
    
    print(string.format("Attribute VB_Name = \"%s\"", mod_name))
    print"'"
    print(string.format("' Auto-generated by consts.lua at %s", os.date()))
    print"' Please do not edit manually!"
    print"'"
    print"Option Explicit"
    print"DefObj A-Z"
    print""
    print(s)
end

main(#arg > 0 and arg[1] or DEFAULT_ARG1, #arg > 1 and arg[2] or DEFAULT_ARG2)
